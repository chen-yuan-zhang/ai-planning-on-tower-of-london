(defun allinstance () 
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_87/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_151/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_52/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_18/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_190/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 2)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_35/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 0)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_139/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_144/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_155/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_120/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_45/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_57/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_161/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_65/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_152/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_11/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_124/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_66/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_136/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_25/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_166/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_150/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_76/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 2)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_178/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_210/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_194/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_207/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_41/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_14/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_29/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_168/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_27/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_131/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 0)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_67/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 1)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_104/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 2)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_71/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_101/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_63/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_50/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 1)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_68/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_47/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_110/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_54/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_116/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 0)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_103/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_88/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_36/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_199/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_28/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 1)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_140/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_201/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_189/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 1)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_69/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 1)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_33/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_82/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_183/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_162/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_188/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_171/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_99/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_170/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_172/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_113/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_184/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_132/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_24/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_97/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_84/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_46/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_17/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_157/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_6/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_122/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_164/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_48/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_56/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_80/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_44/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_134/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_135/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_146/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_125/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_42/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_192/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_195/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 2)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_215/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_185/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_203/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_10/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_100/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_208/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 0)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_31/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 1)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_213/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_186/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_130/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_78/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_129/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_62/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_83/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_91/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_40/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 2)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_34/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_121/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_39/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_22/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_118/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_13/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_167/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 0)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_211/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_37/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_81/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_115/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_197/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_200/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_79/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 1)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_212/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_74/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_96/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_15/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 2)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_107/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 2)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_106/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_94/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_153/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_191/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_8/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 2)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_142/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_126/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_128/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 1)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_32/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_23/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_72/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_60/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_43/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_149/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 1)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_105/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_73/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_4/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_148/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 2)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_214/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_145/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_90/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_198/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_26/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_154/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 1)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_176/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_75/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_209/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_187/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_112/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_3/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_19/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_92/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_169/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_16/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_181/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_117/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_174/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_55/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_182/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_61/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 1)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_177/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_159/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_12/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_196/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_123/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_205/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_206/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_51/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_64/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_173/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_30/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_158/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_204/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_86/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_1/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_119/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_0/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_133/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_202/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_58/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 2)
(nil 0 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_70/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_5/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 0)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_175/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_38/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_98/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_180/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_93/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_138/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_102/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_53/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((1 nil nil)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_109/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_49/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(0 1 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_9/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_21/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_2/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 2 0)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_193/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_59/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(1 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_7/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 2 nil)
(nil 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_85/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_127/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 0)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_163/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_156/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 1)
(nil 2 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_141/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_108/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((2 nil nil)
(1 nil nil)
(0 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(2 nil nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_20/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil nil)
(2 0 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_114/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 nil)
(nil 2 nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_160/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 1 nil)
(nil 2 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_89/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_147/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(0 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_95/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil 1 nil)
(nil 0 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(1 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_77/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 1)
(0 nil nil)
(2 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_165/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(nil 1 nil)
(2 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 2)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_179/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil nil 2)
(nil 1 nil)
(0 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_137/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((0 nil nil)
(2 nil nil)
(1 nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_111/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
(reset) 
 (initialize-model) 
(spew t (puzzle :contents #2A((nil nil 0)
(2 nil nil)
(1 nil nil)
))
*weight*)
(spew t (end-puzzle :contents #2A((nil 0 2)
(nil 1 nil)
(nil nil nil)
))
*weight*)
(run 1000)
(dm)
(with-open-file (stream "TOLdataset/TOL_143/model_time.txt" :direction :output)
(format stream "~A" *cycles*))
)